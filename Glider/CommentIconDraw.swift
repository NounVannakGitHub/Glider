//
//  CommentIconDraw.swift
//  Glider
//
//  Created by Yancen Li on 2/24/17.
//  Copyright Â© 2017 org.yancen. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

import UIKit

public class CommentIconDraw : NSObject {
  
  //// Drawing Methods
  
  public dynamic class func drawCommentIcon(frame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 38), commentsCount: String = "10000") {
    //// General Declarations
    let context = UIGraphicsGetCurrentContext()!
    
    //// Color Declarations
    let mainColor = UIColor(red:1.00, green:0.40, blue:0.00, alpha:1.0)
    
    //// Icon Border Drawing
    let iconBorderPath = UIBezierPath()
    iconBorderPath.move(to: CGPoint(x: frame.minX + 46.25, y: frame.minY + 19))
    iconBorderPath.addCurve(to: CGPoint(x: frame.minX + 39.73, y: frame.minY + 31.2), controlPoint1: CGPoint(x: frame.minX + 46.25, y: frame.minY + 23.76), controlPoint2: CGPoint(x: frame.minX + 43.76, y: frame.minY + 28.08))
    iconBorderPath.addCurve(to: CGPoint(x: frame.minX + 39.85, y: frame.minY + 35.07), controlPoint1: CGPoint(x: frame.minX + 39.77, y: frame.minY + 32.54), controlPoint2: CGPoint(x: frame.minX + 39.85, y: frame.minY + 35.07))
    iconBorderPath.addCurve(to: CGPoint(x: frame.minX + 35.64, y: frame.minY + 33.71), controlPoint1: CGPoint(x: frame.minX + 39.85, y: frame.minY + 35.07), controlPoint2: CGPoint(x: frame.minX + 36.95, y: frame.minY + 34.13))
    iconBorderPath.addCurve(to: CGPoint(x: frame.minX + 24, y: frame.minY + 36.25), controlPoint1: CGPoint(x: frame.minX + 32.25, y: frame.minY + 35.32), controlPoint2: CGPoint(x: frame.minX + 28.27, y: frame.minY + 36.25))
    iconBorderPath.addCurve(to: CGPoint(x: frame.minX + 1.75, y: frame.minY + 19), controlPoint1: CGPoint(x: frame.minX + 11.71, y: frame.minY + 36.25), controlPoint2: CGPoint(x: frame.minX + 1.75, y: frame.minY + 28.53))
    iconBorderPath.addCurve(to: CGPoint(x: frame.minX + 10.92, y: frame.minY + 5.04), controlPoint1: CGPoint(x: frame.minX + 1.75, y: frame.minY + 13.26), controlPoint2: CGPoint(x: frame.minX + 5.36, y: frame.minY + 8.18))
    iconBorderPath.addCurve(to: CGPoint(x: frame.minX + 24, y: frame.minY + 1.75), controlPoint1: CGPoint(x: frame.minX + 14.59, y: frame.minY + 2.97), controlPoint2: CGPoint(x: frame.minX + 19.11, y: frame.minY + 1.75))
    iconBorderPath.addCurve(to: CGPoint(x: frame.minX + 46.25, y: frame.minY + 19), controlPoint1: CGPoint(x: frame.minX + 36.29, y: frame.minY + 1.75), controlPoint2: CGPoint(x: frame.minX + 46.25, y: frame.minY + 9.47))
    iconBorderPath.close()
    mainColor.setStroke()
    iconBorderPath.lineWidth = 1
    iconBorderPath.stroke()
    
    
    //// Icon View Drawing
    let iconViewRect = CGRect(x: frame.minX + 1.75, y: frame.minY + 1.75, width: 44.5, height: 34.5)
    let iconViewStyle = NSMutableParagraphStyle()
    iconViewStyle.alignment = .center
    let iconViewFontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-Medium", size: 13)!, NSForegroundColorAttributeName: mainColor, NSParagraphStyleAttributeName: iconViewStyle]
    
    let iconViewTextHeight: CGFloat = commentsCount.boundingRect(with: CGSize(width: iconViewRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iconViewFontAttributes, context: nil).height
    context.saveGState()
    context.clip(to: iconViewRect)
    commentsCount.draw(in: CGRect(x: iconViewRect.minX, y: iconViewRect.minY + (iconViewRect.height - iconViewTextHeight) / 2, width: iconViewRect.width, height: iconViewTextHeight), withAttributes: iconViewFontAttributes)
    context.restoreGState()
  }
  
}
